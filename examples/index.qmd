---
title: Geometry example
---

```{julia}
using Pkg
Pkg.activate(".")
using DynamicObjects

"""
A common base type for shapes.
"""
@dynamic_type DynamicShape

description(what::DynamicShape) = "A $(what) has an area of $(what.area)."

"""
A fancy rectangle.
"""
@dynamic_object Rectangle <: DynamicShape height::Number width=1  
area(what::Rectangle) = what.height * what.width

"""
A boring circle.
"""
@dynamic_object Circle <: DynamicShape radius::Number
area(what::Circle) = what.radius^2 * pi 

println(Rectangle(10).description)
println(Circle(20).description)
Circle(20)  

Circle(20).cached_area

Circle(20) |> update(:area) |> cached(:description) 
Circle(20) |> update(:area) |> cached(:description) 

# unpack(Circle(20))
DynamicObjects.unpack(Circle(20)) |> println
DynamicObjects.unpack(Rectangle(10, 20)) |> println
DynamicObjects.unpack(Rectangle(10, 20), :height) |> println
```  
```{julia}
abstract type AbstractHSGP{T} end

@macroexpand @static_type function HSGP{T}(boundary_factor, n_functions, x)  
    # https://github.com/avehtari/casestudies/blob/967cdb3a6432e8985886b96fda306645fe156a29/Motorcycle/gpbasisfun_functions.stan#L12-L14
    idxs = 1:n_functions
    pre_eig = (-.25 * (pi/2/boundary_factor)^2) .* idxs .^ 2
    X = sin.((x .+ boundary_factor) .* (pi/(2*boundary_factor)) .* idxs') ./ sqrt(boundary_factor)
    boundary_factor::T, n_functions::Int64, x::Vector{T}, X::Matrix{T}, pre_eig::Vector{T}
end <: AbstractHSGP{T}
# HSGP(1.5, 10, collect(range(0, 1, 20)))
```
```{julia}

```